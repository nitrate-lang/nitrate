#!/usr/bin/env python3

import sys
import os
import glob
import datetime

if len(sys.argv) < 3:
    print("Usage: python ASTReader_CreateTests.py <tree_dir> <output_dir>")
    sys.exit(1)

tree_dir = sys.argv[1]
output_dir = sys.argv[2]

# Print each subdirectory with depth 1
for subdir in glob.glob(os.path.join(tree_dir, "*")):
    domain = os.path.basename(subdir).capitalize()
    unit_test_source_file = os.path.abspath(
        os.path.join(output_dir, f"ASTReader_{domain}.cc"))

    with open(unit_test_source_file, "w") as f:
        f.write("//=================================================//\n")
        f.write("// This file is automatically generated.           //\n")
        f.write("// Do not edit this file.                          //\n")
        f.write("// Generated by ASTReader_CreateTests.py           //\n")
        f.write("// Date: {}                //\n".format(datetime.datetime.now()))
        f.write("//=================================================//\n\n")

        f.write("#include <gtest/gtest.h>\n\n")

        f.write("#include <boost/iostreams/device/array.hpp>\n")
        f.write("#include <boost/iostreams/stream.hpp>\n")
        f.write("#include <nitrate-core/Allocate.hh>\n")
        f.write("#include <nitrate-core/Environment.hh>\n")
        f.write("#include <nitrate-lexer/Lexer.hh>\n")
        f.write("#include <nitrate-parser/ASTReader.hh>\n")
        f.write("#include <nitrate-parser/Context.hh>\n")
        f.write("#include <nitrate-parser/Init.hh>\n")
        f.write("#include <string_view>\n")
        f.write("\n")
        f.write("using namespace ncc;\n")
        f.write("using namespace ncc::lex;\n")
        f.write("using namespace ncc::parse;\n\n")

        f.write("static constexpr auto kFmt = ASTReader::Format::JSON;\n\n")

        f.write("""static auto GetStream(std::string_view str) {
  return boost::iostreams::stream<boost::iostreams::array_source>(str.data(), str.size());
}

static void TestCase(std::string_view source, std::string_view expect) {
  auto lib_rc = ncc::parse::ParseLibrary.GetRC();
  ASSERT_TRUE(lib_rc) << "Failed to initialize library";

  auto mm = DynamicArena();
  auto rd = ASTReader(source, kFmt, mm);
  if (expect.empty()) {
    ASSERT_FALSE(rd.Get()) << "Expected decoding to fail";
    return;
  }

  ASSERT_TRUE(rd.Get()) << "Failed to decode serialized AST";

  auto env = std::make_shared<ncc::Environment>();
  auto istream = GetStream(expect);
  auto lexer = Tokenizer(istream, env);
  auto parser = GeneralParser(lexer, env, mm);
  auto ast = parser.Parse();
  ASSERT_TRUE(ast.Check()) << "Failed to parse AST";

  EXPECT_EQ(rd.Get().value()->IsEq(ast.Get()), true) << "ASTs are not equal";
}
""")

        for test_group in os.listdir(subdir):
            test_group_path = os.path.join(subdir, test_group)
            if not os.path.isdir(test_group_path):
                continue

            test_group_name = test_group.removeprefix("AST_")

            for source_file in glob.glob(f"{test_group_path}/*.nit"):
                test_identity = os.path.basename(
                    source_file).replace(".nit", "")
                expected_file = source_file.replace(".nit", ".json")

                f.write(
                    f"\nTEST(Parser, ASTReader_{domain}_{test_group_name}_{test_identity}) {{")

                is_negative_test = test_identity.startswith("e_")
                if is_negative_test:
                    f.write(f"  // True negative\n")
                else:
                    f.write(f"  // True positive\n")

                with open(source_file, "r") as source_f:
                    source_file_content = source_f.read()
                with open(expected_file, "r") as expected_f:
                    expected_file_content = expected_f.read()

                f.write(
                    f"  constexpr std::string_view kSource = R\"__PY(")
                f.write(expected_file_content)
                f.write(")__PY\";\n")

                f.write(
                    f"  constexpr std::string_view kExpect = R\"__PY(")
                f.write(source_file_content)
                f.write(")__PY\";\n\n")

                f.write(
                    f"  TestCase(kSource, kExpect);\n")

                f.write("}\n")
