name: Build and Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04]
        build_type: [Debug, Release]
        c_compiler: [clang]
        include:
          - os: ubuntu-24.04
            c_compiler: clang
            cpp_compiler: clang++
        exclude: []

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Dump OS information
      run: |
        echo "OS: ${{ runner.os }}"
        echo "OS Version: ${{ runner.os_version }}"
        echo "Architecture: ${{ runner.arch }}"
        cat /etc/os-release
      shell: bash

    - name: Install dependencies
      run: |
        sudo apt install -y cmake make clang
        sudo apt install -y libboost-all-dev libssl-dev libunwind-dev libcurlpp-dev            \
                            libyaml-cpp-dev rapidjson-dev libreadline-dev libzstd-dev          \
                            libpolly-18-dev llvm-18 nlohmann-json3-dev libsparsehash-dev       \
                            libgit2-dev libgtest-dev libprotobuf-dev protobuf-compiler         \
                            libdeflate-dev

      shell: bash

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCOVERAGE=OFF
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} -j$(nproc)

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: |
        sudo sysctl -w vm.mmap_rnd_bits=28 # Disable ASLR for sanitizers
        export NCC_CONF=${{ github.workspace }}/app
        ctest --build-config ${{ matrix.build_type }} --rerun-failed --output-on-failure
      shell: bash
