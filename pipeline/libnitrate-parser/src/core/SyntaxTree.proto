// Contents: Nitrate language syntax tree protobuf definition.
// Author: Wesley Jones

syntax = "proto2";

package nitrate.parser.SyntaxTree;

message SourceLocationRange {
  message SourceLocation {
    required uint32 line = 1;
    required uint32 column = 2;
    required uint32 offset = 3;
    optional string file = 4 [default = ""];
  }

  optional SourceLocation start = 1;
  optional SourceLocation end = 2;
}

message UserComment {
  required string comment = 1;
}

message CallArgument {
  required string name = 1;
  required Expr value = 2;
}

message FunctionParameter {
  required string name = 1;
  optional Type type = 2;
  optional Expr default_value = 3;
}

enum Vis {
  Vis_Public = 0;
  Vis_Private = 1;
  Vis_Protected = 2;
}

message TemplateParameters {
  message TemplateParameter {
    required string name = 1;
    optional Type type = 2;
    optional Expr default_value = 3;
  }

  repeated TemplateParameter parameters = 1;
}

///===--------------------------------------------------------------------===///

message Discarded {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;
}

message NamedTy {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Expr bit_width = 4;
  optional Expr minimum = 5;
  optional Expr maximum = 6;

  required string name = 7;
}

message InferTy {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Expr bit_width = 4;
  optional Expr minimum = 5;
  optional Expr maximum = 6;
}

message TemplateType {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Expr bit_width = 4;
  optional Expr minimum = 5;
  optional Expr maximum = 6;

  required Type base = 7;
  repeated CallArgument arguments = 8;
}

message RefTy {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Expr bit_width = 4;
  optional Expr minimum = 5;
  optional Expr maximum = 6;

  optional bool volatile = 7 [default = false];
  required Type pointee = 8;
}

message OpaqueTy {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Expr bit_width = 4;
  optional Expr minimum = 5;
  optional Expr maximum = 6;

  required string name = 7;
}

message TupleTy {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Expr bit_width = 4;
  optional Expr minimum = 5;
  optional Expr maximum = 6;

  repeated Type elements = 7;
}

message ArrayTy {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Expr bit_width = 4;
  optional Expr minimum = 5;
  optional Expr maximum = 6;

  required Type element_type = 7;
  required Expr element_count = 8;
}

message FuncTy {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Expr bit_width = 4;
  optional Expr minimum = 5;
  optional Expr maximum = 6;

  repeated Expr attributes = 7;
  repeated FunctionParameter parameters = 8;
  optional bool variadic = 9 [default = false];
  optional Type return_type = 11;
}

///===--------------------------------------------------------------------===///
enum Operator {
  Op_Unspecified = 0;  /* Unspecified operator */
  Op_Plus = 1;         /* '+':    Addition operator */
  Op_Minus = 2;        /* '-':    Subtraction operator */
  Op_Times = 3;        /* '*':    Multiplication operator */
  Op_Slash = 4;        /* '/':    Division operator */
  Op_Percent = 5;      /* '%':    Modulus operator */
  Op_BitAnd = 6;       /* '&':    Bitwise AND operator */
  Op_BitOr = 7;        /* '|':    Bitwise OR operator */
  Op_BitXor = 8;       /* '^':    Bitwise XOR operator */
  Op_BitNot = 9;       /* '~':    Bitwise NOT operator */
  Op_LShift = 10;      /* '<<':   Left shift operator */
  Op_RShift = 11;      /* '>>':   Right shift operator */
  Op_ROTL = 12;        /* '<<<':  Rotate left operator */
  Op_ROTR = 13;        /* '>>>':  Rotate right operator */
  Op_LogicAnd = 14;    /* '&&':   Logical AND operator */
  Op_LogicOr = 15;     /* '||':   Logical OR operator */
  Op_LogicXor = 16;    /* '^^':   Logical XOR operator */
  Op_LogicNot = 17;    /* '!':    Logical NOT operator */
  Op_LT = 18;          /* '<':    Less than operator */
  Op_GT = 19;          /* '>':    Greater than operator */
  Op_LE = 20;          /* '<=':   Less than or equal to operator */
  Op_GE = 21;          /* '>=':   Greater than or equal to operator */
  Op_Eq = 22;          /* '==':   Equal to operator */
  Op_NE = 23;          /* '!=':   Not equal to operator */
  Op_Set = 24;         /* '=':    Assignment operator */
  Op_PlusSet = 25;     /* '+=':   Addition assignment operator */
  Op_MinusSet = 26;    /* '-=':   Subtraction assignment operator */
  Op_TimesSet = 27;    /* '*=':   Multiplication assignment operator */
  Op_SlashSet = 28;    /* '/=':   Division assignment operator */
  Op_PercentSet = 29;  /* '%=':   Modulus assignment operator */
  Op_BitAndSet = 30;   /* '&=':   Bitwise AND assignment operator */
  Op_BitOrSet = 31;    /* '|=':   Bitwise OR assignment operator */
  Op_BitXorSet = 32;   /* '^=':   Bitwise XOR assignment operator */
  Op_LogicAndSet = 33; /* '&&=':  Logical AND assignment operator */
  Op_LogicOrSet = 34;  /* '||=':  Logical OR assignment operator */
  Op_LogicXorSet = 35; /* '^^=':  Logical XOR assignment operator */
  Op_LShiftSet = 36;   /* '<<=':  Left shift assignment operator */
  Op_RShiftSet = 37;   /* '>>=':  Right shift assignment operator */
  Op_ROTLSet = 38;     /* '<<<=': Rotate left assignment operator */
  Op_ROTRSet = 39;     /* '>>>=': Rotate right assignment operator */
  Op_Inc = 40;         /* '++':   Increment operator */
  Op_Dec = 41;         /* '--':   Decrement operator */
  Op_As = 42;          /* 'as':   Type cast operator */
  Op_BitcastAs = 43;   /* 'bitcast_as': Bitcast operator */
  Op_In = 44;          /* 'in':         Generic membership operator */
  Op_Out = 45;         /* 'out':        Output operator */
  Op_Sizeof = 46;      /* 'sizeof':     Size of operator */
  Op_Bitsizeof = 47;   /* 'bitsizeof':  Bit size of operator */
  Op_Alignof = 48;     /* 'alignof':    Alignment of operator */
  Op_Typeof = 49;      /* 'typeof':     Type of operator */
  Op_Comptime = 50;    /* 'comptime':   Compile-time operator */
  Op_Dot = 51;         /* '.':          Dot operator */
  Op_Range = 52;       /* '..':         Range operator */
  Op_Ellipsis = 53;    /* '...':        Ellipsis operator */
  Op_Arrow = 54;       /* '=>':         Arrow operator */
  Op_Question = 55;    /* '?':          Question operator */
}

message Unary {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required Operator operator = 4;
  required Expr operand = 5;
  optional bool is_postfix = 6 [default = false];
}

message Binary {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required Operator operator = 4;
  required Expr left = 5;
  required Expr right = 6;
}

message Integer {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  /* Don't forget to verify me! */
  /* I'm a plain integer in range [0, 2^128). */
  required string number = 4;
}

message Float {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  /* Don't forget to verify me! */
  /* I'm in plain decimal form. */
  required string number = 4;
}

message Boolean {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required bool value = 4;
}

message String {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required bytes text = 4;
}

message Character {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  /* Range: [0, 2^8). */
  required uint32 char = 4;
}

message Call {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required Expr callee = 4;
  repeated CallArgument arguments = 5;
}

message TemplateCall {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required Expr callee = 4;
  repeated CallArgument template_arguments = 5;
  repeated CallArgument arguments = 6;
}

message Import {
  enum Mode {
    Unspecified = 0;
    Code = 1;
    String = 2;
  }

  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required string name = 4;
  optional Mode mode = 5 [default = Code];
  required Expr subtree = 6;
}

message List {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  repeated Expr elements = 4;
}

message Assoc {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required Expr key = 4;
  required Expr value = 5;
}

message Index {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required Expr base = 4;
  required Expr index = 5;
}

message Slice {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required Expr base = 4;
  required Expr start = 5;
  required Expr end = 6;
}

message FString {
  message FStringTerm {
    oneof part {
      string text = 1;
      Expr expr = 2;
    }
  }

  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  repeated FStringTerm elements = 4;
}

message Identifier {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required string name = 4;
}

///===--------------------------------------------------------------------===///

message Block {
  enum Safety {
    Unspecified = 0;
    Safe = 1;
    Unsafe = 2;
  }

  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Safety safety = 4;
  repeated Expr statements = 5;
}

message Variable {
  enum VariableKind {
    Unspecified = 0;
    Const = 1;
    Var = 2;
    Let = 3;
  }

  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required VariableKind kind = 4;
  required string name = 5;
  optional Type type = 6;
  optional Expr initial_value = 7;
  repeated Expr attributes = 8;
}

message Assembly {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required string code = 4;
  repeated Expr arguments = 5;
}

message If {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required Expr condition = 4;
  required Expr true_branch = 5;
  optional Expr false_branch = 6;
}

message While {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required Expr condition = 4;
  required Expr body = 5;
}

message For {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Expr init = 4;
  optional Expr condition = 5;
  optional Expr step = 6;
  required Expr body = 7;
}

message Foreach {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional string index_name = 4 [default = ""];
  required string value_name = 5;
  required Expr expression = 6;
  required Expr body = 7;
}

message Break {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;
}

message Continue {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;
}

message Return {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Expr value = 4;
}

message Case {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required Expr condition = 4;
  required Expr body = 5;
}

message Switch {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required Expr condition = 4;
  repeated Case cases = 5;
  optional Expr default = 6;
}

message Export {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  optional Vis visibility = 4 [default = Vis_Public];
  optional string abi_name = 5 [default = ""];
  repeated Expr attributes = 6;
  required Block body = 7;
}

message Scope {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required string name = 4;
  repeated string dependencies = 5;
  required Expr body = 6;
}

message Typedef {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required string name = 4;
  required Type type = 5;
}

message Enum {
  message Field {
    required string name = 1;
    optional Expr value = 2;
  }

  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required string name = 4;
  optional Type base_type = 5;
  repeated Field items = 6;
}

message Function {
  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required string name = 4;
  optional Type return_type = 6;
  optional TemplateParameters template_parameters = 7;
  repeated FunctionParameter parameters = 8;
  optional bool variadic = 9 [default = false];
  repeated Expr attributes = 13;
  optional Expr body = 14;
}

message Struct {
  enum AggregateKind {
    Unspecified = 0;
    Region_ = 1;
    Struct_ = 2;
    Group_ = 3;
    Class_ = 4;
    Union_ = 5;
  }

  message Field {
    required string name = 1;
    optional Expr default_value = 3;
    optional Type type = 2;
    optional Vis visibility = 4 [default = Vis_Private];
    optional bool is_static = 5 [default = false];
  }

  message Method {
    optional Vis visibility = 1 [default = Vis_Private];
    required Function func = 2;
  }

  optional SourceLocationRange location = 1;
  repeated UserComment comments = 2;

  required AggregateKind kind = 4;
  required string name = 5;
  optional TemplateParameters template_parameters = 6;
  repeated string names = 7;
  repeated Expr attributes = 8;
  repeated Field fields = 9;
  repeated Method methods = 10;
}

message Type {
  oneof node {
    Discarded discarded = 1;

    InferTy infer = 96;
    OpaqueTy opaque = 97;
    RefTy ref = 99;
    ArrayTy array = 100;
    TupleTy tuple = 101;
    FuncTy func = 102;
    TemplateType template = 103;
    NamedTy named = 104;
  }
}

message Expr {
  oneof node {
    Discarded discarded = 1;

    Unary unary = 11;
    Binary binary = 12;
    Integer integer = 15;
    Float float = 16;
    Boolean boolean = 17;
    String string = 18;
    Character character = 19;
    Call call = 22;
    TemplateCall template_call = 23;
    Import import = 24;
    List list = 25;
    Assoc assoc = 26;
    Index index = 27;
    Slice slice = 28;
    FString fstring = 29;
    Identifier identifier = 30;

    Block block = 50;
    Variable variable = 51;
    Assembly assembly = 52;
    If if = 53;
    While while = 54;
    For for = 55;
    Foreach foreach = 56;
    Break break = 57;
    Continue continue = 58;
    Return return = 59;
    Case case = 61;
    Switch switch = 62;
    Export export = 63;
    Scope scope = 64;
    Typedef typedef = 65;
    Enum enum = 66;
    Function function = 67;
    Struct struct = 68;

    InferTy infer = 96;
    OpaqueTy opaque = 97;
    RefTy ref = 99;
    ArrayTy array = 100;
    TupleTy tuple = 101;
    FuncTy func = 102;
    TemplateType template = 103;
    NamedTy named = 104;
  }
}
